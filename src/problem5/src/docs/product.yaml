# [POST] createProduct
/product:
    post: 
        tags:
            - Product
        summary: Create Product
        requestBody:
            description: Create Product
            required: true
            content: 
                application/json:
                    schema:
                        $ref: '#/components/schemas/createProduct'
        responses: 
            201:
                description: 'OK'
            400: 
                description: 'Bad Request'
            409: 
                description: 'Conflict'
            500:
                description: 'Internal server error'
        security:
            - bearerAuth: []

# [PUT] updateProduct
/product/{id}:
    put: 
        tags:
            - Product
        summary: Update Product
        parameters:
            - name: id
              in: path
              required: true
              schema:
                type: string
                example: '123e4567-e89b-12d3-a456-426614174000'
              description: The ID of the product to be updated
        requestBody:
            description: Update Product
            required: true
            content: 
                application/json:
                    schema:
                        $ref: '#/components/schemas/updateProduct'
        responses: 
            200:
                description: 'OK'
            400: 
                description: 'Bad Request'
            409: 
                description: 'Conflict'
            500:
                description: 'Internal server error'
        security:
            - bearerAuth: []

# [DELETE] deleteProduct
/product/delete/{id}:
    delete: 
        tags:
            - Product
        summary: Delete Product
        parameters:
            - name: id
              in: path
              required: true
              schema:
                type: string
                example: '123e4567-e89b-12d3-a456-426614174000'
              description: The ID of the product to be deleted
        responses: 
            200:
                description: 'OK'
            400: 
                description: 'Bad Request'
            409: 
                description: 'Conflict'
            500:
                description: 'Internal server error'
        security:
            - bearerAuth: []

# [GET] listProduct
/product/list:
    get: 
        tags:
            - Product
        summary: List Product
        parameters:
            - name: sortBy
              in: query
              required: false
              schema:
                type: string
                example: 
              description: To sort the products by newest or oldest (optional, default is newest)
            - name: status
              in: query
              required: false
              schema:
                type: string
                example: active
              description: To populate the products by status (optional, if you don't specify the status like active or inactive, it will show all the products)
            - name: condition
              in: query
              required: false
              schema:
                type: string
                example: new
              description: To populate the products by condition (optional, if you don't specify the condition like new or used, it will show all the products)
            - name: page
              in: query
              required: false
              schema:
                type: number
                example: 1
              description: To populate the products by page (default page is 1)
            - name: limit
              in: query
              required: false
              schema:
                type: number
              description: To limit the products per page (default page is 4)
        responses: 
            200:
                description: 'OK'
            400: 
                description: 'Bad Request'
            409: 
                description: 'Conflict'
            500:
                description: 'Internal server error'
        security:
            - bearerAuth: []

# [GET] detailProduct
/product/detail/{id}:
    get: 
        tags:
            - Product
        summary: Delete Product
        parameters:
            - name: id
              in: path
              required: true
              schema:
                type: string
                example: '123e4567-e89b-12d3-a456-426614174000'
              description: The ID of the product to be deleted
        responses: 
            200:
                description: 'OK'
            400: 
                description: 'Bad Request'
            409: 
                description: 'Conflict'
            500:
                description: 'Internal server error'
        security:
            - bearerAuth: []

securityDefinitions:
    bearerAuth:
        type: apiKey
        name: Authorization
        in: header
        description: 'JWT Bearer token for authorization. Example: "Bearer {token}"'